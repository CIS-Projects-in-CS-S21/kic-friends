# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/health.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import proto.common_pb2
import google.protobuf.timestamp_pb2
import proto.health_pb2


class HealthTrackingBase(abc.ABC):

    @abc.abstractmethod
    async def GetHealthDataForUser(self, stream: 'grpclib.server.Stream[proto.health_pb2.GetHealthDataForUserRequest, proto.health_pb2.GetHealthDataForUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def AddHealthDataForUser(self, stream: 'grpclib.server.Stream[proto.health_pb2.AddHealthDataForUserRequest, proto.health_pb2.AddHealthDataForUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteHealthDataForUser(self, stream: 'grpclib.server.Stream[proto.health_pb2.DeleteHealthDataForUserRequest, proto.health_pb2.DeleteHealthDataForUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateHealthDataForDate(self, stream: 'grpclib.server.Stream[proto.health_pb2.UpdateHealthDataForDateRequest, proto.health_pb2.UpdateHealthDataForDateResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/kic.health.HealthTracking/GetHealthDataForUser': grpclib.const.Handler(
                self.GetHealthDataForUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.health_pb2.GetHealthDataForUserRequest,
                proto.health_pb2.GetHealthDataForUserResponse,
            ),
            '/kic.health.HealthTracking/AddHealthDataForUser': grpclib.const.Handler(
                self.AddHealthDataForUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.health_pb2.AddHealthDataForUserRequest,
                proto.health_pb2.AddHealthDataForUserResponse,
            ),
            '/kic.health.HealthTracking/DeleteHealthDataForUser': grpclib.const.Handler(
                self.DeleteHealthDataForUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.health_pb2.DeleteHealthDataForUserRequest,
                proto.health_pb2.DeleteHealthDataForUserResponse,
            ),
            '/kic.health.HealthTracking/UpdateHealthDataForDate': grpclib.const.Handler(
                self.UpdateHealthDataForDate,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.health_pb2.UpdateHealthDataForDateRequest,
                proto.health_pb2.UpdateHealthDataForDateResponse,
            ),
        }


class HealthTrackingStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetHealthDataForUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.health.HealthTracking/GetHealthDataForUser',
            proto.health_pb2.GetHealthDataForUserRequest,
            proto.health_pb2.GetHealthDataForUserResponse,
        )
        self.AddHealthDataForUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.health.HealthTracking/AddHealthDataForUser',
            proto.health_pb2.AddHealthDataForUserRequest,
            proto.health_pb2.AddHealthDataForUserResponse,
        )
        self.DeleteHealthDataForUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.health.HealthTracking/DeleteHealthDataForUser',
            proto.health_pb2.DeleteHealthDataForUserRequest,
            proto.health_pb2.DeleteHealthDataForUserResponse,
        )
        self.UpdateHealthDataForDate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.health.HealthTracking/UpdateHealthDataForDate',
            proto.health_pb2.UpdateHealthDataForDateRequest,
            proto.health_pb2.UpdateHealthDataForDateResponse,
        )
