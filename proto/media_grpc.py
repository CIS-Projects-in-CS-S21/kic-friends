# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/media.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import proto.common_pb2
import proto.media_pb2


class MediaStorageBase(abc.ABC):

    @abc.abstractmethod
    async def UploadFile(self, stream: 'grpclib.server.Stream[proto.media_pb2.UploadFileRequest, proto.media_pb2.UploadFileResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DownloadFileByName(self, stream: 'grpclib.server.Stream[proto.media_pb2.DownloadFileRequest, proto.media_pb2.DownloadFileResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CheckForFileByName(self, stream: 'grpclib.server.Stream[proto.media_pb2.CheckForFileRequest, proto.media_pb2.CheckForFileResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateFilesWithMetadata(self, stream: 'grpclib.server.Stream[proto.media_pb2.UpdateFilesWithMetadataRequest, proto.media_pb2.UpdateFilesWithMetadataResponse]') -> None:
        pass

    @abc.abstractmethod
    async def AddCommentToFile(self, stream: 'grpclib.server.Stream[proto.media_pb2.AddCommentToFileRequest, proto.media_pb2.AddCommentToFileResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetFilesWithMetadata(self, stream: 'grpclib.server.Stream[proto.media_pb2.GetFilesByMetadataRequest, proto.media_pb2.GetFilesByMetadataResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteFilesWithMetaData(self, stream: 'grpclib.server.Stream[proto.media_pb2.DeleteFilesWithMetaDataRequest, proto.media_pb2.DeleteFilesWithMetaDataResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/kic.media.MediaStorage/UploadFile': grpclib.const.Handler(
                self.UploadFile,
                grpclib.const.Cardinality.STREAM_UNARY,
                proto.media_pb2.UploadFileRequest,
                proto.media_pb2.UploadFileResponse,
            ),
            '/kic.media.MediaStorage/DownloadFileByName': grpclib.const.Handler(
                self.DownloadFileByName,
                grpclib.const.Cardinality.UNARY_STREAM,
                proto.media_pb2.DownloadFileRequest,
                proto.media_pb2.DownloadFileResponse,
            ),
            '/kic.media.MediaStorage/CheckForFileByName': grpclib.const.Handler(
                self.CheckForFileByName,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.media_pb2.CheckForFileRequest,
                proto.media_pb2.CheckForFileResponse,
            ),
            '/kic.media.MediaStorage/UpdateFilesWithMetadata': grpclib.const.Handler(
                self.UpdateFilesWithMetadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.media_pb2.UpdateFilesWithMetadataRequest,
                proto.media_pb2.UpdateFilesWithMetadataResponse,
            ),
            '/kic.media.MediaStorage/AddCommentToFile': grpclib.const.Handler(
                self.AddCommentToFile,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.media_pb2.AddCommentToFileRequest,
                proto.media_pb2.AddCommentToFileResponse,
            ),
            '/kic.media.MediaStorage/GetFilesWithMetadata': grpclib.const.Handler(
                self.GetFilesWithMetadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.media_pb2.GetFilesByMetadataRequest,
                proto.media_pb2.GetFilesByMetadataResponse,
            ),
            '/kic.media.MediaStorage/DeleteFilesWithMetaData': grpclib.const.Handler(
                self.DeleteFilesWithMetaData,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.media_pb2.DeleteFilesWithMetaDataRequest,
                proto.media_pb2.DeleteFilesWithMetaDataResponse,
            ),
        }


class MediaStorageStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.UploadFile = grpclib.client.StreamUnaryMethod(
            channel,
            '/kic.media.MediaStorage/UploadFile',
            proto.media_pb2.UploadFileRequest,
            proto.media_pb2.UploadFileResponse,
        )
        self.DownloadFileByName = grpclib.client.UnaryStreamMethod(
            channel,
            '/kic.media.MediaStorage/DownloadFileByName',
            proto.media_pb2.DownloadFileRequest,
            proto.media_pb2.DownloadFileResponse,
        )
        self.CheckForFileByName = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.media.MediaStorage/CheckForFileByName',
            proto.media_pb2.CheckForFileRequest,
            proto.media_pb2.CheckForFileResponse,
        )
        self.UpdateFilesWithMetadata = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.media.MediaStorage/UpdateFilesWithMetadata',
            proto.media_pb2.UpdateFilesWithMetadataRequest,
            proto.media_pb2.UpdateFilesWithMetadataResponse,
        )
        self.AddCommentToFile = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.media.MediaStorage/AddCommentToFile',
            proto.media_pb2.AddCommentToFileRequest,
            proto.media_pb2.AddCommentToFileResponse,
        )
        self.GetFilesWithMetadata = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.media.MediaStorage/GetFilesWithMetadata',
            proto.media_pb2.GetFilesByMetadataRequest,
            proto.media_pb2.GetFilesByMetadataResponse,
        )
        self.DeleteFilesWithMetaData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kic.media.MediaStorage/DeleteFilesWithMetaData',
            proto.media_pb2.DeleteFilesWithMetaDataRequest,
            proto.media_pb2.DeleteFilesWithMetaDataResponse,
        )
