import asyncio
import unittest

from grpclib.client import Channel

# generated by protoc
from proto.common_pb2 import User
from proto.friends_pb2 import *
from proto.friends_grpc import FriendsStub


class IntegrationTests(unittest.IsolatedAsyncioTestCase):
    client = None

    @classmethod
    async def set_up(cls):
        channel = Channel('localhost', 50051)
        greeter = FriendsStub(channel)
        cls.client = greeter
        repo = {
            1: [5, 6, 8],
            5: [1, 2, 3, 6],
            8: [1, 3, 5],
            10: [20, 30, 40],
            20: [5, 10],
            25: [5, 10],
            30: [35],
            35: [30],
        }

        for uid in repo:
            for f_uid in repo[uid]:
                res = await cls.client.CreateConnectionForUsers(
                    CreateConnectionForUsersRequest(
                        firstUserID=uid,
                        secondUserID=f_uid,
                    )
                )
                print(res)

    # Check that if we attempt to get an existing user's friends we get the proper list
    async def test_get_existing_friends_list(self):
        resp = await self.client.GetFriendsForUser(GetFriendsForUserRequest(
            user=User(
                userID=5,
                userName="test",
                email="test",
            )
        ))
        friends = list(resp.message.friends)
        self.assertListEqual(friends, [1, 2, 3, 6])

    # Check that if we attempt to get a not existing user's friends we get an empty proper list
    async def test_get_nonexisting_friends_list(self):
        resp = await self.client.GetFriendsForUser(GetFriendsForUserRequest(
            user=User(
                userID=1000,
                userName="test",
                email="test",
            )
        )).message
        friends = list(resp.friends)
        self.assertListEqual(friends, [])

    # Check that if we delete an existing friend and user combo that we succeed
    async def test_delete_friend_existing(self):
        await self.client.DeleteConnectionBetweenUsers(
            DeleteConnectionBetweenUsersRequest(
                firstUserID=8,
                secondUserID=1,
            )
        )
        res1 = await self.client.GetFriendsForUser(
            GetFriendsForUserRequest(
                user=User(
                    userID=8,
                )
            )
        ).message
        u1_friends_list = list(res1.friends)

        res2 = await self.client.GetFriendsForUser(
            GetFriendsForUserRequest(
                user=User(
                    userID=1,
                )
            )
        ).message
        u2_friends_list = res2.friends

        self.assertListEqual(u1_friends_list, [3, 5])
        self.assertListEqual(u2_friends_list, [5, 6])

    async def test_delete_friend_not_existing(self):
        success = self.client.DeleteConnectionBetweenUsers(
            DeleteConnectionBetweenUsersRequest(
                firstUserID=1000,
                secondUserID=1,
            )
        ).message
        self.assertFalse(success)

    async def test_add_friend_existing(self):
        success = self.client.CreateConnectionForUsers(
            CreateConnectionForUsersRequest(
                firstUserID=20,
                secondUserID=25,
            )
        ).message
        self.assertTrue(success.success)
        u1_friends_list = list(self.client.GetFriendsForUser(
            GetFriendsForUserRequest(
                user=User(
                    userID=20,
                )
            )
        ).message.friends)
        u2_friends_list = list(self.client.GetFriendsForUser(
            GetFriendsForUserRequest(
                user=User(
                    userID=25,
                )
            )
        ).message.friends)
        self.assertListEqual(u1_friends_list, [5, 10, 25])
        self.assertListEqual(u2_friends_list, [5, 10, 20])

    async def test_add_friend_already_existing(self):
        success = self.client.CreateConnectionForUsers(
            CreateConnectionForUsersRequest(
                firstUserID=30,
                secondUserID=35,
            )
        ).message
        self.assertFalse(success.success)


async def config():
    await IntegrationTests.set_up()

if __name__ == '__main__':
    asyncio.run(config())
    #unittest.main()
