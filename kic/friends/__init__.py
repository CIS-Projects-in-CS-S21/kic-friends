# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/friends.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class GetFriendsForUserRequest(betterproto.Message):
    """Request to get the user's friends."""

    # Inform the client of information regarding the user.
    user: "_common__.User" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetFriendsForUserResponse(betterproto.Message):
    """Response to a request for getting the user's friends."""

    # An array of all other users that the user is currently friends with.
    friends: List[int] = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRecommendationsForUserRequest(betterproto.Message):
    """Request to get friend recommendations for the user."""

    # Inform the client of information regarding the user.
    user: "_common__.User" = betterproto.message_field(1)
    # How many recommendations the client would like to receive.
    number_recommendations: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRecommendationsForUserResponse(betterproto.Message):
    """
    Response to a request for getting friend recommendations for the user.
    """

    # An array of users that will be recommended to the user.
    recommendations: List["_common__.User"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateConnectionBetweenUsersRequest(betterproto.Message):
    """
    Update the connection between two users by modifying the connection value.
    """

    # ID of the first user.
    first_user_id: int = betterproto.uint64_field(1)
    # ID of the second user.
    second_user_id: int = betterproto.uint64_field(2)
    # The new value for the connection between the first user and second user.
    update_value: float = betterproto.float_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetConnectionBetweenUsersRequest(betterproto.Message):
    """Retrieve the connection between two users."""

    # ID of the first user.
    first_user_id: int = betterproto.uint64_field(1)
    # ID of the second user.
    second_user_id: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConnectionBetweenUsersResponse(betterproto.Message):
    """Response to a request for fetching the connection between two users."""

    # Denotes the strength of the connection between two users.
    connection_strength: float = betterproto.float_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteConnectionBetweenUsersRequest(betterproto.Message):
    """Request for a connection between two users to be deleted."""

    # ID of the first user.
    first_user_id: int = betterproto.uint64_field(1)
    # ID of the second user.
    second_user_id: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteConnectionBetweenUsersResponse(betterproto.Message):
    """Response to a request for deleting a connection between two users."""

    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateConnectionForUsersRequest(betterproto.Message):
    """Request for two users to become friends."""

    # ID of the first user.
    first_user_id: int = betterproto.uint64_field(1)
    # ID of the second user.
    second_user_id: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateConnectionForUsersResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class FriendsStub(betterproto.ServiceStub):
    """Service handling fetching and storing data about friends."""

    async def get_friends_for_user(
        self, *, user: "_common__.User" = None
    ) -> "GetFriendsForUserResponse":
        """Request a list of the IDs of all friends of a particular user."""

        request = GetFriendsForUserRequest()
        if user is not None:
            request.user = user

        return await self._unary_unary(
            "/kic.friends.Friends/GetFriendsForUser", request, GetFriendsForUserResponse
        )

    async def get_connection_between_users(
        self, *, first_user_id: int = 0, second_user_id: int = 0
    ) -> "ConnectionBetweenUsersResponse":
        """
        Request information about the connection between two users, checking
        for existence and strength.
        """

        request = GetConnectionBetweenUsersRequest()
        request.first_user_id = first_user_id
        request.second_user_id = second_user_id

        return await self._unary_unary(
            "/kic.friends.Friends/GetConnectionBetweenUsers",
            request,
            ConnectionBetweenUsersResponse,
        )

    async def get_recommendations_for_user(
        self, *, user: "_common__.User" = None, number_recommendations: int = 0
    ) -> "GetRecommendationsForUserResponse":
        """
        Request a list of given size of users who might be friends of the
        requesting user.
        """

        request = GetRecommendationsForUserRequest()
        if user is not None:
            request.user = user
        request.number_recommendations = number_recommendations

        return await self._unary_unary(
            "/kic.friends.Friends/GetRecommendationsForUser",
            request,
            GetRecommendationsForUserResponse,
        )

    async def create_connection_for_users(
        self, *, first_user_id: int = 0, second_user_id: int = 0
    ) -> "CreateConnectionForUsersResponse":
        """Add two users as friends and create a connection between them."""

        request = CreateConnectionForUsersRequest()
        request.first_user_id = first_user_id
        request.second_user_id = second_user_id

        return await self._unary_unary(
            "/kic.friends.Friends/CreateConnectionForUsers",
            request,
            CreateConnectionForUsersResponse,
        )

    async def update_connection_between_users(
        self,
        *,
        first_user_id: int = 0,
        second_user_id: int = 0,
        update_value: float = 0.0,
    ) -> "ConnectionBetweenUsersResponse":
        """Update a connection strength between two users."""

        request = UpdateConnectionBetweenUsersRequest()
        request.first_user_id = first_user_id
        request.second_user_id = second_user_id
        request.update_value = update_value

        return await self._unary_unary(
            "/kic.friends.Friends/UpdateConnectionBetweenUsers",
            request,
            ConnectionBetweenUsersResponse,
        )

    async def delete_connection_between_users(
        self, *, first_user_id: int = 0, second_user_id: int = 0
    ) -> "DeleteConnectionBetweenUsersResponse":
        """Delete the connection between two users."""

        request = DeleteConnectionBetweenUsersRequest()
        request.first_user_id = first_user_id
        request.second_user_id = second_user_id

        return await self._unary_unary(
            "/kic.friends.Friends/DeleteConnectionBetweenUsers",
            request,
            DeleteConnectionBetweenUsersResponse,
        )


class FriendsBase(ServiceBase):
    """Service handling fetching and storing data about friends."""

    async def get_friends_for_user(
        self, user: "_common__.User"
    ) -> "GetFriendsForUserResponse":
        """Request a list of the IDs of all friends of a particular user."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_connection_between_users(
        self, first_user_id: int, second_user_id: int
    ) -> "ConnectionBetweenUsersResponse":
        """
        Request information about the connection between two users, checking
        for existence and strength.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_recommendations_for_user(
        self, user: "_common__.User", number_recommendations: int
    ) -> "GetRecommendationsForUserResponse":
        """
        Request a list of given size of users who might be friends of the
        requesting user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_connection_for_users(
        self, first_user_id: int, second_user_id: int
    ) -> "CreateConnectionForUsersResponse":
        """Add two users as friends and create a connection between them."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_connection_between_users(
        self, first_user_id: int, second_user_id: int, update_value: float
    ) -> "ConnectionBetweenUsersResponse":
        """Update a connection strength between two users."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_connection_between_users(
        self, first_user_id: int, second_user_id: int
    ) -> "DeleteConnectionBetweenUsersResponse":
        """Delete the connection between two users."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_friends_for_user(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user": request.user,
        }

        response = await self.get_friends_for_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_connection_between_users(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "first_user_id": request.first_user_id,
            "second_user_id": request.second_user_id,
        }

        response = await self.get_connection_between_users(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_recommendations_for_user(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user": request.user,
            "number_recommendations": request.number_recommendations,
        }

        response = await self.get_recommendations_for_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_create_connection_for_users(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "first_user_id": request.first_user_id,
            "second_user_id": request.second_user_id,
        }

        response = await self.create_connection_for_users(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update_connection_between_users(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "first_user_id": request.first_user_id,
            "second_user_id": request.second_user_id,
            "update_value": request.update_value,
        }

        response = await self.update_connection_between_users(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_connection_between_users(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "first_user_id": request.first_user_id,
            "second_user_id": request.second_user_id,
        }

        response = await self.delete_connection_between_users(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kic.friends.Friends/GetFriendsForUser": grpclib.const.Handler(
                self.__rpc_get_friends_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetFriendsForUserRequest,
                GetFriendsForUserResponse,
            ),
            "/kic.friends.Friends/GetConnectionBetweenUsers": grpclib.const.Handler(
                self.__rpc_get_connection_between_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetConnectionBetweenUsersRequest,
                ConnectionBetweenUsersResponse,
            ),
            "/kic.friends.Friends/GetRecommendationsForUser": grpclib.const.Handler(
                self.__rpc_get_recommendations_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRecommendationsForUserRequest,
                GetRecommendationsForUserResponse,
            ),
            "/kic.friends.Friends/CreateConnectionForUsers": grpclib.const.Handler(
                self.__rpc_create_connection_for_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateConnectionForUsersRequest,
                CreateConnectionForUsersResponse,
            ),
            "/kic.friends.Friends/UpdateConnectionBetweenUsers": grpclib.const.Handler(
                self.__rpc_update_connection_between_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateConnectionBetweenUsersRequest,
                ConnectionBetweenUsersResponse,
            ),
            "/kic.friends.Friends/DeleteConnectionBetweenUsers": grpclib.const.Handler(
                self.__rpc_delete_connection_between_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteConnectionBetweenUsersRequest,
                DeleteConnectionBetweenUsersResponse,
            ),
        }


from .. import common as _common__
