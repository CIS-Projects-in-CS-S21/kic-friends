# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/users.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class AddUserRequest(betterproto.Message):
    """Request for a user to be added to the user database."""

    email: str = betterproto.string_field(1)
    desired_username: str = betterproto.string_field(2)
    desired_password: str = betterproto.string_field(3)
    # User's birthday in MM/DD/YYYY format.
    birthday: "_common__.Date" = betterproto.message_field(4)
    # User's city location.
    city: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddUserResponse(betterproto.Message):
    """Response to a request for adding a user to the database."""

    # Denotes if the user was properly created.
    success: bool = betterproto.bool_field(1)
    # Inform the client of the information assigned to the user should they be
    # accepted.
    created_user: "_common__.User" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserByUsernameRequest(betterproto.Message):
    """Request for obtaining user data from username"""

    # username sent in request
    username: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserByUsernameResponse(betterproto.Message):
    """Response to a request for obtaining user data from a username"""

    # denotes if the user was successfully found
    success: bool = betterproto.bool_field(1)
    # User returned in response
    user: "_common__.User" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserByIdRequest(betterproto.Message):
    """Request for obtaining userdata from id"""

    # User ID sent in request
    user_id: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserByIdResponse(betterproto.Message):
    """Response to a request for obtaining user data from user id"""

    # denotes if the user was successfully found
    success: bool = betterproto.bool_field(1)
    # User returned in response
    user: "_common__.User" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserNameByIdRequest(betterproto.Message):
    """Request for obtaining username from user id"""

    # User ID sent in request
    user_id: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserNameByIdResponse(betterproto.Message):
    """Response to a request for obtaining username from user id"""

    # Username associated with the given user id
    username: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteUserByIdRequest(betterproto.Message):
    """Request to delete a user with a given user id"""

    # User ID sent in request
    user_id: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteUserByIdResponse(betterproto.Message):
    """Response to a request to delete a user with a given user id"""

    # Denotes if the user was successfully deleted.
    success: bool = betterproto.bool_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateUserInfoRequest(betterproto.Message):
    """Request to update a user's information with the information provided"""

    # Only required item is the User id which is used to identify what entry to
    # update, all other non null fields will be used to update the proper column
    # in the database
    user_id: int = betterproto.int64_field(1)
    email: str = betterproto.string_field(2)
    desired_username: str = betterproto.string_field(3)
    desired_password: str = betterproto.string_field(4)
    # User's birthday in MM/DD/YYYY format.
    birthday: "_common__.Date" = betterproto.message_field(5)
    # User's city location.
    city: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateUserInfoResponse(betterproto.Message):
    """
    Response to a request to update a user's information with the information
    provided
    """

    # Denotes if the user was properly updated.
    success: bool = betterproto.bool_field(1)
    # Inform the client of the information assigned to the user.
    updated_user: "_common__.User" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetJwtTokenRequest(betterproto.Message):
    """
    A Request to the server to return a JWT token to authenticate the remainder
    of the session with the given user.
    """

    # Requesting user's username
    username: str = betterproto.string_field(1)
    # Requesting user's password
    password: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetJwtTokenResponse(betterproto.Message):
    """
    The server response to a client request for a JWT, providing the token.
    """

    # Return the token as a string should the client send proper credentials
    token: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class UsersStub(betterproto.ServiceStub):
    """Service handling fetching and storing data about users."""

    async def get_jwt_token(self) -> "GetJwtTokenResponse":
        """
        Authenticate the client session and return a JWT that can be utilized
        for all further contact requiring authentication
        """

        request = GetJwtTokenRequest()

        return await self._unary_unary(
            "/kic.users.Users/GetJWTToken", request, GetJwtTokenResponse
        )

    async def add_user(
        self,
        *,
        email: str = "",
        desired_username: str = "",
        desired_password: str = "",
        birthday: "_common__.Date" = None,
        city: str = "",
    ) -> "AddUserResponse":
        """Add a new user to the database."""

        request = AddUserRequest()
        request.email = email
        request.desired_username = desired_username
        request.desired_password = desired_password
        if birthday is not None:
            request.birthday = birthday
        request.city = city

        return await self._unary_unary(
            "/kic.users.Users/AddUser", request, AddUserResponse
        )

    async def get_user_by_username(
        self, *, username: str = ""
    ) -> "GetUserByUsernameResponse":
        """Request user information from a username."""

        request = GetUserByUsernameRequest()
        request.username = username

        return await self._unary_unary(
            "/kic.users.Users/GetUserByUsername", request, GetUserByUsernameResponse
        )

    async def get_user_by_id(self) -> "GetUserByIdResponse":
        """Request user information from a User ID."""

        request = GetUserByIdRequest()

        return await self._unary_unary(
            "/kic.users.Users/GetUserByID", request, GetUserByIdResponse
        )

    async def get_user_name_by_id(self) -> "GetUserNameByIdResponse":
        """Request only a username from a User ID."""

        request = GetUserNameByIdRequest()

        return await self._unary_unary(
            "/kic.users.Users/GetUserNameByID", request, GetUserNameByIdResponse
        )

    async def delete_user_by_id(self) -> "DeleteUserByIdResponse":
        """
        Delete the user with the given ID, this will need to cascade to other
        services.
        """

        request = DeleteUserByIdRequest()

        return await self._unary_unary(
            "/kic.users.Users/DeleteUserByID", request, DeleteUserByIdResponse
        )

    async def update_user_info(
        self,
        *,
        user_id: int = 0,
        email: str = "",
        desired_username: str = "",
        desired_password: str = "",
        birthday: "_common__.Date" = None,
        city: str = "",
    ) -> "UpdateUserInfoResponse":
        """Update a user's information to that sent by the client."""

        request = UpdateUserInfoRequest()
        request.user_id = user_id
        request.email = email
        request.desired_username = desired_username
        request.desired_password = desired_password
        if birthday is not None:
            request.birthday = birthday
        request.city = city

        return await self._unary_unary(
            "/kic.users.Users/UpdateUserInfo", request, UpdateUserInfoResponse
        )


class UsersBase(ServiceBase):
    """Service handling fetching and storing data about users."""

    async def get_jwt_token(self) -> "GetJwtTokenResponse":
        """
        Authenticate the client session and return a JWT that can be utilized
        for all further contact requiring authentication
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_user(
        self,
        email: str,
        desired_username: str,
        desired_password: str,
        birthday: "_common__.Date",
        city: str,
    ) -> "AddUserResponse":
        """Add a new user to the database."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_by_username(self, username: str) -> "GetUserByUsernameResponse":
        """Request user information from a username."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_by_id(self) -> "GetUserByIdResponse":
        """Request user information from a User ID."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_name_by_id(self) -> "GetUserNameByIdResponse":
        """Request only a username from a User ID."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user_by_id(self) -> "DeleteUserByIdResponse":
        """
        Delete the user with the given ID, this will need to cascade to other
        services.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user_info(
        self,
        user_id: int,
        email: str,
        desired_username: str,
        desired_password: str,
        birthday: "_common__.Date",
        city: str,
    ) -> "UpdateUserInfoResponse":
        """Update a user's information to that sent by the client."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_jwt_token(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_jwt_token(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_add_user(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "email": request.email,
            "desired_username": request.desired_username,
            "desired_password": request.desired_password,
            "birthday": request.birthday,
            "city": request.city,
        }

        response = await self.add_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_user_by_username(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "username": request.username,
        }

        response = await self.get_user_by_username(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_user_by_id(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_user_by_id(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_user_name_by_id(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_user_name_by_id(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_user_by_id(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.delete_user_by_id(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update_user_info(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
            "email": request.email,
            "desired_username": request.desired_username,
            "desired_password": request.desired_password,
            "birthday": request.birthday,
            "city": request.city,
        }

        response = await self.update_user_info(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kic.users.Users/GetJWTToken": grpclib.const.Handler(
                self.__rpc_get_jwt_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJwtTokenRequest,
                GetJwtTokenResponse,
            ),
            "/kic.users.Users/AddUser": grpclib.const.Handler(
                self.__rpc_add_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddUserRequest,
                AddUserResponse,
            ),
            "/kic.users.Users/GetUserByUsername": grpclib.const.Handler(
                self.__rpc_get_user_by_username,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserByUsernameRequest,
                GetUserByUsernameResponse,
            ),
            "/kic.users.Users/GetUserByID": grpclib.const.Handler(
                self.__rpc_get_user_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserByIdRequest,
                GetUserByIdResponse,
            ),
            "/kic.users.Users/GetUserNameByID": grpclib.const.Handler(
                self.__rpc_get_user_name_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserNameByIdRequest,
                GetUserNameByIdResponse,
            ),
            "/kic.users.Users/DeleteUserByID": grpclib.const.Handler(
                self.__rpc_delete_user_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteUserByIdRequest,
                DeleteUserByIdResponse,
            ),
            "/kic.users.Users/UpdateUserInfo": grpclib.const.Handler(
                self.__rpc_update_user_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserInfoRequest,
                UpdateUserInfoResponse,
            ),
        }


from .. import common as _common__
