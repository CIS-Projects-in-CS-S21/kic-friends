# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/feed.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class GenerateFeedForUserRequest(betterproto.Message):
    """Request to generate user feed for the user."""

    # The ID of the user in the user database, used globally for identification.
    user_id: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GenerateFeedForUserResponse(betterproto.Message):
    """Response to a request for generating feed for the user."""

    # The file being pulled, consisting of the file name, file location, and
    # metadata.
    file_info: "_common__.File" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class FeedStub(betterproto.ServiceStub):
    """Service handling generating data for user feed"""

    async def generate_feed_for_user(
        self, *, user_id: int = 0
    ) -> AsyncIterator["GenerateFeedForUserResponse"]:
        """
        Generate a stream of posts until either exhausted or the client
        requests an end.
        """

        request = GenerateFeedForUserRequest()
        request.user_id = user_id

        async for response in self._unary_stream(
            "/kic.feed.Feed/GenerateFeedForUser",
            request,
            GenerateFeedForUserResponse,
        ):
            yield response


class FeedBase(ServiceBase):
    """Service handling generating data for user feed"""

    async def generate_feed_for_user(
        self, user_id: int
    ) -> AsyncIterator["GenerateFeedForUserResponse"]:
        """
        Generate a stream of posts until either exhausted or the client
        requests an end.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_generate_feed_for_user(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
        }

        await self._call_rpc_handler_server_stream(
            self.generate_feed_for_user,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kic.feed.Feed/GenerateFeedForUser": grpclib.const.Handler(
                self.__rpc_generate_feed_for_user,
                grpclib.const.Cardinality.UNARY_STREAM,
                GenerateFeedForUserRequest,
                GenerateFeedForUserResponse,
            ),
        }


from .. import common as _common__
