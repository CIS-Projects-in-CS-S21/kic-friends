# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/health.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class HealthDataError(betterproto.Enum):
    """
    These are errors used to inform the client requesting health data what the
    issue is.The variable names denote the issue.
    """

    # USER_NOT_FOUND denotes if user is not found.
    USER_NOT_FOUND = 0
    # DATE_NOT_FOUND denotes if date is not found.
    DATE_NOT_FOUND = 1


@dataclass(eq=False, repr=False)
class HealthDataErrorResponse(betterproto.Message):
    """Response to a user when there is a mental health data error."""

    # Error denotes if error occurred with health data.
    error: "HealthDataError" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetHealthDataForUserRequest(betterproto.Message):
    """Request from a user to get their mental health tracking data."""

    # The ID of the user in the user database, used globally for identification.
    user_id: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MentalHealthLog(betterproto.Message):
    """Response to a user with complete mental health log"""

    # Date of Mental Health Log Entry
    log_date: "_common__.Date" = betterproto.message_field(1)
    # Score denotes the mental health tracking score from logDate.
    score: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetHealthDataForUserResponse(betterproto.Message):
    """Response to a user when user asks for health data."""

    # healthData denotes the data that was requested by user from mental health
    # log
    health_data: List["MentalHealthLog"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddHealthDataForUserRequest(betterproto.Message):
    """
    Request from a user to add their mental health data to MentalHealthLog.
    """

    # The ID of the user in the user database, used globally for identification.
    user_id: int = betterproto.int64_field(1)
    # newEntry denotes the ID of the new entry that is requested to be made.
    new_entry: "MentalHealthLog" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddHealthDataForUserResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteHealthDataForUserRequest(betterproto.Message):
    """
    Request from a user to delete their mental health data from
    MentalHealthLog.
    """

    # The ID of the user in the user database, used globally for identification.
    user_id: int = betterproto.int64_field(1)
    # all denotes if all of the health data should be removed or not.
    all: bool = betterproto.bool_field(2, group="data")
    # dateToRemove denotes the date of the mental health log data to remove.
    date_to_remove: "_common__.Date" = betterproto.message_field(3, group="data")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteHealthDataForUserResponse(betterproto.Message):
    """Response to a user when user asks to delete health data."""

    # Error denotes if error occurred when deleting health data and the ID of the
    # error it was.
    error: "HealthDataError" = betterproto.enum_field(1)
    # entriesDeleted denotes the mental health log entries that was successfully
    # deleted for the user
    entries_deleted: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateHealthDataForDateRequest(betterproto.Message):
    """
    Request from a user to update their mental health tracking data for a
    particular date.
    """

    # The ID of the user in the user database, used globally for identification.
    user_id: int = betterproto.int64_field(1)
    # The desiredLogInfo denotes the log info that the user would like to update.
    desired_log_info: "MentalHealthLog" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateHealthDataForDateResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class HealthTrackingStub(betterproto.ServiceStub):
    """
    Service handling fetching and storing mental health tracking data about
    users.
    """

    async def get_health_data_for_user(
        self, *, user_id: int = 0
    ) -> "GetHealthDataForUserResponse":
        """
        Given health data obtained upon user request, said health data is
        returned to user.
        """

        request = GetHealthDataForUserRequest()
        request.user_id = user_id

        return await self._unary_unary(
            "/kic.health.HealthTracking/GetHealthDataForUser",
            request,
            GetHealthDataForUserResponse,
        )

    async def add_health_data_for_user(
        self, *, user_id: int = 0, new_entry: "MentalHealthLog" = None
    ) -> "AddHealthDataForUserResponse":
        """
        Health data requested to be added by user is added, and error is
        returned if appropriate.
        """

        request = AddHealthDataForUserRequest()
        request.user_id = user_id
        if new_entry is not None:
            request.new_entry = new_entry

        return await self._unary_unary(
            "/kic.health.HealthTracking/AddHealthDataForUser",
            request,
            AddHealthDataForUserResponse,
        )

    async def delete_health_data_for_user(
        self,
        *,
        user_id: int = 0,
        all: bool = False,
        date_to_remove: "_common__.Date" = None,
    ) -> "DeleteHealthDataForUserResponse":
        """
        Health data requested by user to be deleted is deleted and said deleted
        entries are returned to user.
        """

        request = DeleteHealthDataForUserRequest()
        request.user_id = user_id
        request.all = all
        if date_to_remove is not None:
            request.date_to_remove = date_to_remove

        return await self._unary_unary(
            "/kic.health.HealthTracking/DeleteHealthDataForUser",
            request,
            DeleteHealthDataForUserResponse,
        )

    async def update_health_data_for_date(
        self, *, user_id: int = 0, desired_log_info: "MentalHealthLog" = None
    ) -> "UpdateHealthDataForDateResponse":
        """
        Health data requested to be updated by user is updated, and error is
        returned if appropriate.
        """

        request = UpdateHealthDataForDateRequest()
        request.user_id = user_id
        if desired_log_info is not None:
            request.desired_log_info = desired_log_info

        return await self._unary_unary(
            "/kic.health.HealthTracking/UpdateHealthDataForDate",
            request,
            UpdateHealthDataForDateResponse,
        )


class HealthTrackingBase(ServiceBase):
    """
    Service handling fetching and storing mental health tracking data about
    users.
    """

    async def get_health_data_for_user(
        self, user_id: int
    ) -> "GetHealthDataForUserResponse":
        """
        Given health data obtained upon user request, said health data is
        returned to user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_health_data_for_user(
        self, user_id: int, new_entry: "MentalHealthLog"
    ) -> "AddHealthDataForUserResponse":
        """
        Health data requested to be added by user is added, and error is
        returned if appropriate.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_health_data_for_user(
        self, user_id: int, all: bool, date_to_remove: "_common__.Date"
    ) -> "DeleteHealthDataForUserResponse":
        """
        Health data requested by user to be deleted is deleted and said deleted
        entries are returned to user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_health_data_for_date(
        self, user_id: int, desired_log_info: "MentalHealthLog"
    ) -> "UpdateHealthDataForDateResponse":
        """
        Health data requested to be updated by user is updated, and error is
        returned if appropriate.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_health_data_for_user(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
        }

        response = await self.get_health_data_for_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_add_health_data_for_user(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
            "new_entry": request.new_entry,
        }

        response = await self.add_health_data_for_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_health_data_for_user(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
            "all": request.all,
            "date_to_remove": request.date_to_remove,
        }

        response = await self.delete_health_data_for_user(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update_health_data_for_date(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
            "desired_log_info": request.desired_log_info,
        }

        response = await self.update_health_data_for_date(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kic.health.HealthTracking/GetHealthDataForUser": grpclib.const.Handler(
                self.__rpc_get_health_data_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetHealthDataForUserRequest,
                GetHealthDataForUserResponse,
            ),
            "/kic.health.HealthTracking/AddHealthDataForUser": grpclib.const.Handler(
                self.__rpc_add_health_data_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddHealthDataForUserRequest,
                AddHealthDataForUserResponse,
            ),
            "/kic.health.HealthTracking/DeleteHealthDataForUser": grpclib.const.Handler(
                self.__rpc_delete_health_data_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteHealthDataForUserRequest,
                DeleteHealthDataForUserResponse,
            ),
            "/kic.health.HealthTracking/UpdateHealthDataForDate": grpclib.const.Handler(
                self.__rpc_update_health_data_for_date,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateHealthDataForDateRequest,
                UpdateHealthDataForDateResponse,
            ),
        }


from .. import common as _common__
